/**
 ** Simple XML syntax dictionary for TextMate.
 ** Author: Brian Lalor <blalor@bravo5.org>
 **
 ** Some patterns (and most colors) taken from the bundled HTML.plist.
 **
 ** $URL$
 ** $Id$
 **
 ** TODO
 ** ----
 ** â€¢ more thorough DOCTYPE scanning (less greedy)
 **/

{
	name = "XML";
	scopeName = "text.xml";
	uuid = "D3C4E6DA-6B1C-11D9-8CC2-000D93589AF6";
	
	firstLineMatch = "^\\s*<\\?xml";

	// pt, cpt, and dtml comes from Zope development
	fileTypes = ( xml, tld, jsp, xsl, xslt, pt, cpt, dtml );

	foldingStartMarker = "^\\s*(<[^!?%/](?!.+?(/>|</.+?>))|<[!%]--(?!.+?--%?>)|<%[!]?(?!.+?%>))";
	foldingStopMarker  = "^\\s*(</[^>]+>|[/%]>|-->)\\s*$";

	patterns = (
		/* processing instructions */
		{
			name = "meta.docinfo.processing.xml";
			begin = "<\\?\\s*[-_a-zA-Z0-9]+";
			end = "\\?>";

			patterns = (
	  			{ name = "keyword.markup.tag.options.xml"; match = " ([a-zA-Z\-]+)"; },
	  			{ name = "string.double-quoted.xml"; begin = "\""; end = "\"";},
				{ name = "string.single-quoted.xml"; begin = "'"; end = "'";},
			);
		},
		
		/* doctype */
		{
			name = "meta.docinfo.doctype.xml";
			begin = "<!(DOCTYPE)";
			end = ">";

			captures = {
			    1 = {
			        name = "meta.docinfo.doctype-literal.xml";
			    };
			};

			patterns = (
				{
					begin = "<!(ENTITY)\\s([-_a-zA-Z0-9]+)";
					end = ">";
					
					captures = {
					    1 = {
					        name = "meta.docinfo.entity-literal.xml";
					    };
					    2 = {
					        name = "meta.docinfo.entity-definition.xml";
					    };
					};

					patterns = (
	  					{ name = "string.double-quoted.xml"; begin = "\""; end = "\"";},
						{ name = "string.single-quoted.xml"; begin = "'"; end = "'";},
					);
				},
			);
		},
		
		/* comments */
		{
			name = "comment.block.xml";
			begin = "<[!%]--";
			end = "--%?>";
		},
		
		/* nodes */
		{
			// "tags" in HTML; want them to be colored similarly.
			name = "keyword.markup.tags.xml";
			begin = "</?(([-_a-zA-Z0-9]+):)?([-_a-zA-Z0-9:]+)";
			end = "(/?)>";
			
			captures = {
			    2 = {
			        name = "keyword.markup.tags.namespace.xml";
			    };
			    3 = {
			        name = "keyword.markup.tags.xml";
			    };
			};

			patterns = (
	  			{ name = "keyword.markup.tag.options.xml"; match = " ([a-zA-Z\-]+)"; },
	  			{ name = "string.double-quoted.html"; begin = "\""; end = "\"";},
				{ name = "string.single-quoted.html"; begin = "'"; end = "'";},
			);
		},

		/* entities */
		{ name = "constant.character-entities.html"; match = "&([a-zA-Z0-9_-]+|#[0-9]+|#x[0-9a-fA-F]+);";},
		{ name = "invalid.bad-ampersand.html"; match = "&";},
		
        /* jsp page properties */
 		{
          // JSP page properties
  			name = "embedded.jsp-props";
			begin = "<%@";
			patterns = (
				{ match = "page|include|taglib"; name = "embedded.jsp-props.page-props"; },
			);
			end = "%>";
		},
		
        /* embedded java */
		{
			name = "source.java.embedded";
			begin = "<%[!=]?(?!--)";
			patterns = ( { include = "source.java"; } );
			end = "(?!--)%>";
		},
	);
}